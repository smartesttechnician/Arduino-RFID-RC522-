#include <SPI.h>
#include <MFRC522.h>

#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN);   // Create MFRC522 instance.

// --- buzzer settings ---
#define BUZZER_PIN    8    // change to the pin you wired the buzzer to
#define BUZZER_ACTIVE true // true = active buzzer (digital HIGH to beep)
// if your buzzer is passive (needs a tone), set BUZZER_ACTIVE to false

// beep patterns (milliseconds)
const unsigned long AUTH_BEEP_ON  = 150;
const unsigned long AUTH_BEEP_OFF = 80;
const int AUTH_BEEPS = 3;

const unsigned long DENY_BEEP_ON  = 500;
const unsigned long DENY_BEEP_OFF = 0;
const int DENY_BEEPS = 1;

void setup() 
{
  Serial.begin(9600);   // Initiate a serial communication
  SPI.begin();          // Initiate  SPI bus
  mfrc522.PCD_Init();   // Initiate MFRC522
  Serial.println("Approximate your card to the reader...");
  Serial.println();

  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW); // ensure buzzer off
}

void loop() 
{
  // Look for new cards
  if ( ! mfrc522.PICC_IsNewCardPresent()) 
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial()) 
  {
    return;
  }


  String uidStr = "";
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
    char buf[3];
    sprintf(buf, "%02X", mfrc522.uid.uidByte[i]);
    uidStr += String(buf);
    if (i < mfrc522.uid.size - 1) uidStr += " ";
  }

  // Show UID on serial monitor
  Serial.print("UID tag : ");
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
  }
  Serial.println();

  Serial.print("Message : ");
  uidStr.toUpperCase();
  Serial.println(uidStr);

  if (uidStr == "C7 19 0A 01") // change here to your authorized UID
  {
    Serial.println("Authorized access");
    beepAuthorized();
    Serial.println();
    delay(1000); // small pause before next read
  }
  else
  {
    Serial.println("Access denied");
    beepDenied();
    Serial.println();
    delay(1000);
  }

  mfrc522.PICC_HaltA();
}

void beepAuthorized() {
  if (BUZZER_ACTIVE) {
    for (int i = 0; i < AUTH_BEEPS; i++) {
      digitalWrite(BUZZER_PIN, HIGH);
      delay(AUTH_BEEP_ON);
      digitalWrite(BUZZER_PIN, LOW);
      if (i < AUTH_BEEPS - 1) delay(AUTH_BEEP_OFF);
    }
  } else {
    // passive buzzer: play short beeps using tone()
    for (int i = 0; i < AUTH_BEEPS; i++) {
      tone(BUZZER_PIN, 2000); // frequency in Hz 
      delay(AUTH_BEEP_ON);
      noTone(BUZZER_PIN);
      if (i < AUTH_BEEPS - 1) delay(AUTH_BEEP_OFF);
    }
  }
}

void beepDenied() {
  if (BUZZER_ACTIVE) {
    digitalWrite(BUZZER_PIN, HIGH);
    delay(DENY_BEEP_ON);
    digitalWrite(BUZZER_PIN, LOW);
  } else {
    tone(BUZZER_PIN, 600); 
    delay(DENY_BEEP_ON);
    noTone(BUZZER_PIN);
  }
}

/*SDA	Digital 10
SCK	Digital 13
MOSI	Digital 11
MISO	Digital 12
IRQ	unconnected
GND	GND
RST	Digital 9
3.3V -	3.3V
